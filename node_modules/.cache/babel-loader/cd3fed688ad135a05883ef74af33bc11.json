{"ast":null,"code":"import _slicedToArray from \"f:\\\\COBOL\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"f:\\\\COBOL\\\\client\\\\src\\\\Components\\\\DropdownContext.js\";\nimport React, { createContext, useEffect, useState } from 'react';\nexport const DropdownContextProvider = createContext();\n\nconst DropdownContext = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isOpen = _useState2[0],\n        setOpen = _useState2[1];\n\n  const user = localStorage.getItem('user');\n\n  const closeDropdown = () => {\n    setOpen(!isOpen);\n  };\n\n  return React.createElement(DropdownContextProvider.Provider, {\n    value: {\n      closeDropdown,\n      isOpen\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default DropdownContext;","map":{"version":3,"sources":["f:\\COBOL\\client\\src\\Components\\DropdownContext.js"],"names":["React","createContext","useEffect","useState","DropdownContextProvider","DropdownContext","props","isOpen","setOpen","user","localStorage","getItem","closeDropdown","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,SAA9B,EAAyCC,QAAzC,QAAwD,OAAxD;AACC,OAAO,MAAMC,uBAAuB,GAACH,aAAa,EAA3C;;AAER,MAAMI,eAAe,GAAIC,KAAD,IAAW;AAAA,oBACNH,QAAQ,CAAC,KAAD,CADF;AAAA;AAAA,QACxBI,MADwB;AAAA,QAChBC,OADgB;;AAG/B,QAAMC,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAb;;AAIA,QAAMC,aAAa,GAAE,MAAI;AAErBJ,IAAAA,OAAO,CAAC,CAACD,MAAF,CAAP;AACH,GAHD;;AAIA,SACI,oBAAC,uBAAD,CAAyB,QAAzB;AAAkC,IAAA,KAAK,EAAE;AAACK,MAAAA,aAAD;AAAiBL,MAAAA;AAAjB,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,KAAK,CAACO,QADX,CADJ;AAKH,CAhBD;;AAkBA,eAAeR,eAAf","sourcesContent":["import React ,{createContext ,useEffect, useState} from 'react'\r\n export const DropdownContextProvider=createContext()\r\n\r\nconst DropdownContext = (props) => {\r\n    const [isOpen, setOpen]= useState(false);\r\n    \r\n    const user=  localStorage.getItem('user');\r\n    \r\n   \r\n    \r\n    const closeDropdown= ()=>{\r\n        \r\n        setOpen(!isOpen)\r\n    }\r\n    return (\r\n        <DropdownContextProvider.Provider value={{closeDropdown , isOpen}}>\r\n            {props.children}\r\n        </DropdownContextProvider.Provider>\r\n    )\r\n}\r\n\r\nexport default DropdownContext\r\n"]},"metadata":{},"sourceType":"module"}