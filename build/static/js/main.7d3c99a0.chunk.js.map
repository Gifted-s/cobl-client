{"version":3,"sources":["Components/AsyncComponent.js","Components/ErrorHandler.js","App.js","serviceWorker.js","index.js"],"names":["AsyncComponent","import_","props","state","component","default","this","setState","C","Component","ErrorBoundaries","hasError","error","errorInfo","React","logErrorToMyService","style","color","children","DropdownContext","Home","Signin","Signup","Dashboard","Products","AddProduct","Edit","Service","About","user","localStorage","getItem","Error","className","onClick","history","push","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAEgB,SAASA,EAAgBC,GAkBzC,OAlBiD,YAE5C,WAAYC,GAAO,IAAD,8BACf,+CACKC,MAAO,CACRC,UAAU,MAHC,EAF0B,iNASRH,IATQ,gBAS1BG,EAT0B,EASlCC,QACPC,KAAKC,SAAS,CAACH,cAV0B,mIAa5C,IAAMI,EAAIF,KAAKH,MAAMC,UAClB,OAAQI,EAAE,kBAACA,EAAMF,KAAKJ,OAAU,SAdS,GACnBO,a,ICDTC,E,YACnB,WAAYR,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAM,CACTQ,UAAS,GAHK,E,+EAYDC,EAAOC,GACvBC,IAAMC,oBAAoBH,EAAMC,K,+BAI/B,OAAGP,KAAKH,MAAMQ,SAEV,6BAEG,kFAAuD,0BAAMK,MAAO,CAACC,MAAM,UAApB,cAM5D,6BACGX,KAAKJ,MAAMgB,a,kDApBjB,MAAO,CACLP,UAAS,O,GAV+BF,aCOvCU,EAAiBnB,EAAe,kBAAI,gCACpCoB,EAAMpB,EAAe,kBAAI,gCACzBqB,EAAQrB,EAAe,kBAAI,gCAC3BsB,EAAQtB,EAAe,kBAAI,gCAC3BuB,EAAWvB,EAAe,kBAAI,uDAC9BwB,EAAUxB,EAAe,kBAAI,gCAC7ByB,EAAYzB,EAAgB,kBAAI,iCAChC0B,EAAM1B,EAAe,kBAAI,iCACzB2B,EAAS3B,EAAe,kBAAI,gCAC5B4B,EAAO5B,EAAe,kBAAI,gCAE1B6B,EAAMC,aAAaC,QAAQ,QAE3BC,EAAO,SAAS9B,GACpB,OACE,yBAAK+B,UAAU,OACX,yBAAKA,UAAW,0CACd,wBAAIA,UAAU,gBAAd,2BAKA,yBAAKA,UAAU,gCACf,uBAAGA,UAAU,eAAb,8CACA,4BAASC,QAAS,WAChBhC,EAAMiC,QAAQC,KAAK,MAClBH,UAAU,kCAFb,qCAoDKI,E,iLAlCX,OAEC,yBAAKJ,UAAU,OACf,kBAAC,EAAD,KACC,kBAACd,EAAD,KAEE,kBAAC,IAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,KAAK,IAAIlC,UAAWgB,EAAMmB,OAAK,IACtC,kBAAC,IAAD,CAAOD,KAAK,UAAUlC,UAAWkB,IAEjC,kBAAC,IAAD,CAAOgB,KAAK,UAAUlC,UAAWiB,IACjC,kBAAC,IAAD,CAAOiB,KAAK,SAASlC,UAAWwB,IAChC,kBAAC,IAAD,CAAOU,KAAK,WAAWlC,UAAWuB,IAClC,kBAAC,IAAD,CAAOW,KAAK,UAAUlC,UAAWyB,EAAMJ,EAAYL,IACnD,kBAAC,IAAD,CAAOkB,KAAK,aAAalC,UAAWyB,EAAMN,EAAWH,IACrD,kBAAC,IAAD,CAAOkB,KAAK,QAAQlC,UAAWyB,EAAMH,EAAMN,IAC3C,kBAAC,IAAD,CAAOkB,KAAK,YAAYlC,UAAWyB,EAAML,EAAUJ,IACnD,kBAAC,IAAD,CAAOhB,UAAW4B,a,GArBVvB,aCpCE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7d3c99a0.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default  function AsyncComponent (import_){\r\n class asyncComponent extends Component {\r\n     constructor(props){\r\n        super();\r\n        this.state= {\r\n            component:null\r\n        }\r\n     }\r\n    async componentDidMount(){\r\n        const {default:component}= await import_();\r\n        this.setState({component})\r\n     }\r\n    render() {\r\n     const C = this.state.component\r\n        return (C?<C {...this.props}/>: null )\r\n    }\r\n\r\n}\r\nreturn asyncComponent;\r\n\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ErrorBoundaries extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      hasError:false\r\n    }\r\n  }\r\n\r\n static getDerivedStateFromError(){\r\n   return {\r\n     hasError:true\r\n   }\r\n }\r\n componentDidCatch(error, errorInfo){\r\n   React.logErrorToMyService(error,errorInfo);\r\n   \r\n }\r\n  render() {\r\n    if(this.state.hasError){\r\n      return(\r\n        <div>\r\n          \r\n           <h1>An error occured while Loading the page............<span style={{color:'green'}}>COBL.com</span></h1>\r\n        </div>\r\n      )\r\n      \r\n    }\r\n    return (\r\n      <div>\r\n        {this.props.children}\r\n      </div>\r\n      \r\n    )\r\n  }\r\n}\r\n","\nimport React , {Component} from 'react';\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\n\n\n\n\nimport AsyncComponent from './Components/AsyncComponent';\nimport ErrorBoundary from './Components/ErrorHandler';\nconst DropdownContext= AsyncComponent(()=>import(\"./Components/DropdownContext\"))\nconst Home= AsyncComponent(()=>import(\"./Components/Home\"));\nconst Signin= AsyncComponent(()=>import(\"./Components/Signin\"))\nconst Signup= AsyncComponent(()=>import(\"./Components/Signup\"));\nconst Dashboard= AsyncComponent(()=>import(\"./Components/Dashboard\"));\nconst Products= AsyncComponent(()=>import(\"./Components/Products\"));\nconst AddProduct= AsyncComponent((()=>import(\"./Components/UploadProduct\")))\nconst Edit= AsyncComponent(()=>import('./Components/EditProfile'))\nconst Service= AsyncComponent(()=>import('./Components/Service'))\nconst About= AsyncComponent(()=>import('./Components/About'))\n\nconst user= localStorage.getItem('user');\n\nconst Error= function(props){\n  return(\n    <div className=\"row\">\n        <div className= \"jumbotron col-10 col-md-8 mx-auto my-4\">\n          <h1 className=\"text-center \">\n            Oops!!! page not  found\n            \n          </h1>\n          \n          <div className=\"col-10 col-md-8 mx-auto my-4\">\n          <p className=\"text-center\">You can access other pages in this website</p>\n          <button  onClick={()=>{\n            props.history.push('/')\n          }} className='mx-auto d-block btn btn-danger'>\n            Click to go back to home page\n          </button>\n          </div>\n         \n        </div>\n\n</div>\n  \n\n  \n  )\n}\nclass App extends Component {\n  render(){\n\n    return (\n    \n     <div className=\"App\">\n     <ErrorBoundary>\n      <DropdownContext>\n     \n        <BrowserRouter>\n        <Switch>\n          <Route path=\"/\" component={Home} exact/>\n          <Route path=\"/signup\" component={Signup}/>\n          \n          <Route path=\"/signin\" component={Signin}/>\n          <Route path=\"/about\" component={About}/>\n          <Route path=\"/service\" component={Service}/>\n          <Route path=\"/upload\" component={user ?AddProduct: Home }/>\n          <Route path=\"/dashboard\" component={user ?Dashboard: Home }/>\n          <Route path=\"/edit\" component={user ?Edit: Home }/>\n          <Route path=\"/products\" component={user ?Products: Home }/>\n          <Route component={Error}/>\n         \n        </Switch>\n        </BrowserRouter>\n      </DropdownContext>\n    </ErrorBoundary>\n     </div>\n    \n     \n     \n      \n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}